import io
import librosa
import soundfile as sf
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import sqlite3
import config

bot = Bot(token=config.TGTOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect('stats.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS stats
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   date DATE)''')
conn.commit()

@dp.message_handler(content_types=types.ContentType.VOICE)
async def process_voice_message(message: types.Message):
    voice_file = io.BytesIO()
    await message.voice.download(destination_file=voice_file)
    y, sr = librosa.load(voice_file, sr=16000)
    voice_file.close()
    voice_file = io.BytesIO()
    sf.write(voice_file, y, sr, format='WAV', subtype='PCM_16')
    voice_file.seek(0)
    text = recognize_speech(voice_file)
    await message.reply(text)
    record_stat(message.from_user.id)

def recognize_speech(file):
    import speech_recognition as sr
    r = sr.Recognizer()
    with sr.AudioFile(file) as source:
        audio = r.record(source)
        try:
            text = r.recognize_google(audio, language='ru-RU')
            return text
        except sr.UnknownValueError:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
        except sr.RequestError as e:
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}"

def record_stat(user_id):
    cursor.execute("INSERT INTO stats (user_id, date) VALUES (?, DATE('now'))", (user_id,))
    conn.commit()

@dp.message_handler(commands=['help'])
async def show_help(message: types.Message):
    await message.answer(f"–ß—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤—å/–ø–µ—Ä–µ—à–ª–∏ –µ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω –µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤ —Ç–µ–∫—Å—Ç.\n" \
                         f"–î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —á–∞—Ç, –Ω–∞–∑–Ω–∞—á—å –∞–¥–º–∏–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ—è –≤ —á–∞—Ç–µ –≤ —Ç–µ–∫—Å—Ç")
    
@dp.message_handler(commands=['info'])
async def show_info(message: types.Message):
    await message.answer(f"–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ @B4DCAT404\n"\
                         f"–ü–æ –ø–æ–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—ã - @b4dcat404_support")

@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM stats")
    total_users = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM stats WHERE date = DATE('now')")
    today_users = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM stats")
    total_requests = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM stats WHERE date = DATE('now')")
    today_requests = cursor.fetchone()[0]
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n" \
           f" ‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n" \
           f" ‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {today_users}\n" \
           f" ‚îú –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n" \
           f" ‚îî –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_requests}"
    await message.reply(text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
